{"version":3,"sources":["components/Navbar.js","components/LocCard.js","components/Data.js","components/ViewMap.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","state","handleItemClick","e","name","setState","activeItem","this","Menu","pointing","secondary","size","Item","as","NavLink","to","header","position","color","active","Icon","Component","ServerCard","props","Card","href","CardContent","Header","Description","value","Data","latitude","longitude","temp","loading","failed","error","getData","bind","axios","get","then","response","data","feeds","field1","field2","field3","catch","setInterval","Grid","padded","columns","Column","Message","negative","icon","Content","centered","stackable","Row","LocCard","ViewMap","style","display","justifyContent","height","Map","center","zoom","TileLayer","url","attribution","Marker","Popup","Home","Segment","attached","inverted","App","className","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.494a8398.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport { Menu,Icon } from 'semantic-ui-react';\r\n\r\nclass Navbar extends Component {\r\n  state = {}\r\n\r\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name })\r\n\r\n  render() {\r\n    const { activeItem } = this.state\r\n\r\n    return (\r\n      <Menu pointing secondary size='massive'>\r\n\r\n        <Menu.Item as={NavLink} to='/'>\r\n          ERS\r\n        </Menu.Item>\r\n\r\n        <Menu.Item header\r\n        name='Emergency Response System'\r\n        \r\n        />\r\n\r\n        <Menu.Menu position='left'>\r\n            <Menu.Item as={NavLink} to='Data' color='red'\r\n            name='Data'\r\n            active={activeItem === 'Data'}\r\n            >\r\n              Data\r\n            </Menu.Item>\r\n\r\n            <Menu.Item as={NavLink} to='ViewMap' color='red'\r\n            name='Map'\r\n            active={activeItem === 'Map'}\r\n            >\r\n              <Icon name='map'/>Map\r\n            </Menu.Item>\r\n            \r\n            \r\n        </Menu.Menu>\r\n\r\n        <Menu.Menu position='right'>\r\n\r\n            <Menu.Item as={NavLink} to='About' color='blue'\r\n            name='About'\r\n            active={activeItem === 'About'}\r\n            />\r\n            \r\n        </Menu.Menu>\r\n\r\n      </Menu>\r\n    )\r\n  }\r\n}\r\nexport default Navbar;","import React from 'react';\r\nimport {Card,CardContent} from 'semantic-ui-react';\r\n\r\n\r\nconst ServerCard = props => {\r\n    return(\r\n        \r\n        <Card color={props.color} href>\r\n            <CardContent>\r\n                <Card.Header>{props.header}</Card.Header>\r\n            \r\n              \r\n              <Card.Description>\r\n                <h1>{props.value}</h1>\r\n              </Card.Description>\r\n\r\n              </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default ServerCard;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport {Message,Grid,Icon } from 'semantic-ui-react';\r\nimport LocCard from './LocCard';\r\n\r\n\r\n//const API_URL = 'http://18.219.235.189/status.php';\r\nconst API_URL = 'https://api.thingspeak.com/channels/897841/feeds.json?results=1';\r\n\r\nclass Data extends Component{\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n        latitude: \"\",\r\n        longitude: \"\",\r\n        temp: \"\",\r\n        loading: true,\r\n        failed: false,\r\n        error:null,\r\n      }\r\n      this.getData = this.getData.bind(this);\r\n    }\r\n\r\n    getData() {\r\n      axios\r\n        .get(`${API_URL}`)\r\n        .then((response) => this.setState({\r\n              latitude: response.data.feeds[0].field1,\r\n              longitude: response.data.feeds[0].field2,\r\n              temp: response.data.feeds[0].field3,\r\n              loading:false,\r\n              failed: false,}))\r\n        .catch(error => this.setState({ error, loading: false, failed: true}));\r\n    }\r\n    \r\ncomponentDidMount() {\r\n  this.getData()\r\n  \r\n  setInterval(this.getData, 5000)\r\n    \r\n}\r\n\r\n\r\n  render(){\r\n  if(this.state.failed)\r\n  {\r\n    return(\r\n      <Grid padded columns='equal'>\r\n        <Grid.Column></Grid.Column>\r\n        <Grid.Column>\r\n          <Message negative>\r\n            <Message.Header><Icon name='warning'/> Sorry unable to fetch data</Message.Header>\r\n          </Message>\r\n        </Grid.Column>\r\n        <Grid.Column></Grid.Column>\r\n      </Grid>\r\n      \r\n    );\r\n  }\r\n  else{\r\n    return(\r\n      \r\n      this.state.loading?(\r\n        <div>\r\n        <Message icon>\r\n          <Icon name='circle notched' loading />\r\n          <Message.Content>\r\n            <Message.Header>Just one second</Message.Header>\r\n            Fetching the content...\r\n          </Message.Content>\r\n        </Message>\r\n        </div>\r\n      ):(\r\n        \r\n        <div>\r\n           <Grid centered stackable padded columns={3}>\r\n             <Grid.Row>\r\n           <Grid.Column><LocCard color='green' header='LATITUDE' value={this.state.latitude}/></Grid.Column>\r\n           <Grid.Column><LocCard color='green' header='LONGITUDE' value={this.state.longitude}/></Grid.Column>\r\n           </Grid.Row>\r\n           <Grid.Row>\r\n           <Grid.Column><LocCard color='green' header='Temperature' value={this.state.temp+\"*C\"}/></Grid.Column>\r\n           </Grid.Row>\r\n            </Grid>\r\n        </div>\r\n        \r\n      )\r\n      \r\n      );\r\n      \r\n  }\r\n    }\r\n  }  \r\n  export default Data;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport {Message,Grid,Icon } from 'semantic-ui-react';\r\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet';\r\n\r\n\r\n//const API_URL = 'http://18.219.235.189/status.php';\r\nconst API_URL = 'https://api.thingspeak.com/channels/897841/feeds.json?results=1';\r\n\r\nclass ViewMap extends Component{\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n        latitude: \"\",\r\n        longitude: \"\",\r\n        loading: true,\r\n        failed: false,\r\n        error:null,\r\n      }\r\n      this.getData = this.getData.bind(this);\r\n    }\r\n\r\n    getData() {\r\n      axios\r\n        .get(`${API_URL}`)\r\n        .then((response) => this.setState({\r\n              latitude: response.data.feeds[0].field1,\r\n              longitude: response.data.feeds[0].field2,\r\n              loading:false,\r\n              failed: false,}))\r\n        .catch(error => this.setState({ error, loading: false, failed: true}));\r\n    }\r\n    \r\ncomponentDidMount() {\r\n  this.getData()\r\n  \r\n  setInterval(this.getData, 5000)\r\n    \r\n}\r\n\r\n\r\n  render(){\r\n    const position=[this.state.latitude,this.state.longitude];\r\n  if(this.state.failed)\r\n  {\r\n    return(\r\n      <Grid padded columns='equal'>\r\n        <Grid.Column></Grid.Column>\r\n        <Grid.Column>\r\n          <Message negative>\r\n            <Message.Header><Icon name='warning'/> Sorry unable to fetch data</Message.Header>\r\n          </Message>\r\n        </Grid.Column>\r\n        <Grid.Column></Grid.Column>\r\n      </Grid>\r\n      \r\n    );\r\n  }\r\n  else{\r\n    return(\r\n      \r\n      this.state.loading?(\r\n        <div>\r\n        <Message icon>\r\n          <Icon name='circle notched' loading />\r\n          <Message.Content>\r\n            <Message.Header>Just one second</Message.Header>\r\n            Fetching the content...\r\n          </Message.Content>\r\n        </Message>\r\n        </div>\r\n      ):(\r\n        \r\n        <div style={{display: 'flex',  justifyContent:'center',  height: '100vh'}}>\r\n        <Map center={position} zoom={17}>\r\n          <TileLayer\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n          />\r\n          <Marker position={position}>\r\n      <Popup>Lat: {this.state.latitude}<br/>Long: {this.state.longitude}</Popup>\r\n          </Marker>\r\n        </Map>\r\n        </div>\r\n        \r\n        \r\n      )\r\n      \r\n      );\r\n      \r\n  }\r\n    }\r\n  }  \r\n  export default ViewMap;","import React, { Component } from 'react';\r\nimport {Segment, Grid} from 'semantic-ui-react';\r\n\r\nclass Home extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Segment size='massive' attached='top' inverted color='black' style={{height: '60vh'}}>\r\n                    <Grid centered columns={3} stackable>\r\n                        <Grid.Row style={{height: '20vh'}}>\r\n                            <Grid.Column></Grid.Column>\r\n                            </Grid.Row><Grid.Row>\r\n                            <Segment size='massive'color='blue' inverted>\r\n                                Emergency Response System\r\n                            </Segment> \r\n                        </Grid.Row>\r\n                        <Grid.Row></Grid.Row>\r\n                    </Grid>\r\n                </Segment>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Home;\r\n/*\r\n<Segment attached='bottom' style={{height: '25vh'}}>\r\n                    <Grid centered columns={3} stackable>\r\n                        <Grid.Row >\r\n                            <Grid.Column></Grid.Column>\r\n                        </Grid.Row>\r\n                        <Grid.Row>\r\n                            <div attached='bottom'> \r\n                                <b>Site Developed and Maintained By:</b>\r\n                                <br/>\r\n                                <br/>\r\n                                Rohit V. Patil\r\n                            </div> \r\n                        </Grid.Row>\r\n                        <Grid.Row></Grid.Row>\r\n                    </Grid>\r\n                </Segment>\r\n                */","import React, { Component } from 'react';\nimport Navbar from './components/Navbar';\nimport {HashRouter,Route,Switch} from 'react-router-dom';\nimport Data from './components/Data';\nimport ViewMap from './components/ViewMap';\nimport Home from './components/Home';\n\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n      <div className=\"App\">\n        <Navbar/>\n        <Switch>\n          <Route exact path=\"/\" component={Home}/>\n          <Route path=\"/data\" component={Data}/>\n          <Route path=\"/viewmap\" component={ViewMap}/>\n        </Switch>\n      </div>\n      </HashRouter>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}